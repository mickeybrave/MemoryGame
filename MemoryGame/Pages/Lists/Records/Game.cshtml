@page "/Lists/{id}/Records/Game"
@model MemoryGame.Pages.Lists.Records.GameModel

@{
    ViewData["Title"] = "The game for " + Model.Header;
    Layout = "~/Pages/Shared/_Layout.cshtml";
}
@using System.Net;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
   <style>
       .div-table {
           display: table;
           width: 100%;
       }
       .div-table-row {
           display: table-row;
           clear: both;
          
       }
       .div-table-col {
           float: left;
           display: table-column;
           width: 50%;
       }
       .div {
           float: right;
       }
</style>
<script>
    var allRecordDecorators;
    var gameRecordDecorators ;
    var recordToGuess;
    var isValidGuess=false;

    var _wrongGuesses=0;
    const constMaxWrongGuesses = 3;

    $(document).ready(function () {

        $("#success").on('load', function () {
            console.log("#success loaded")
            $("#success").blink({ delay: 200 });
            $("#success").fadeOut(3000, function () {
                // Animation complete.
            });
        });

        $("#failure").on('load', function () {
            console.log("#failure loaded")
            $("#failure").blink({ delay: 200 });
            $("#failure").fadeOut(3000, function () {
                // Animation complete.
            });
        });

        function getAllGuessedIndexes(arr) {
            var indexes = [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i].isGuessed === true) {
                    indexes.push(i);
                }
            }
            return indexes;
        }
        function getAllGuessedCount(arr) {
            var count = 0;
            for (var i = 0; i < arr.length; i++) {
                if (arr[i].isGuessed === true) {
                    count++;
                }
            }
            return count;
        }

        function buildGameArray(arr, indexesArr) {
            var gameArr = [];
            //console.log("arr is " + JSON.stringify(arr));
            //console.log("indexesArr is " + JSON.stringify(indexesArr));
            for (var i = 0; i < indexesArr.length; i++) {
                for (var j = 0; j < arr.length; j++) {
                    if (j === indexesArr[i]) {
                        console.log("added to game array: "+arr[j])
                        gameArr.push(arr[j]);
                    }
                }
            }
            return gameArr;
        }


        function updateAllRecordsState(arr, id, state) {
            for (var i = 0; i < arr.length; i++) {
                if (id === arr[i].id) {
                    arr[i].isGuessed = state;
                    }
            }
        }

        function getRandomArr(arr,min, max, count, excludeArr) {
            if (typeof arr === 'undefined' || arr === null) {
                arr = [];
                console.log('arr: '+arr);
            }

            var randNum = Math.floor(Math.random() * (max - min + 1)) + min;

            if (!arr.includes(randNum) && !excludeArr.includes(randNum))
                arr.push(randNum);

            if (arr.length < count)
                return getRandomArr(arr, min, max, count, excludeArr);
            else
                return arr;


            //while(arr.length < count) {
            //    var randNum = Math.floor(Math.random() * (max - min + 1)) + min;
            //    if (!arr.includes(randNum) && !excludeArr.includes(randNum))
            //        arr.push(randNum);
            //}

            //return arr;
        }

        function endTheGame(isWon){

            var myNode = document.getElementById("content");
            while (myNode.firstChild) {
                myNode.removeChild(myNode.firstChild);
            }
            $("#labelRecordToGuess").hide();
            $("#h1GameOver").show();
            var span = document.getElementById("gameOverSpan");
            var allGuessedCount = getAllGuessedCount(allRecordDecorators);
            if (isWon) {
                //$("#h1Success").show();
                //$("#h1Failure").hide();

                span.className = "label label-success";
                span.innerHTML = "You won! Your score is " + allGuessedCount;
            }
            else {
                //$("#h1Failure").show();
                //$("#h1Success").hide();
                span.className = "label label-danger";
                span.innerHTML = "Game Over. Your score is " + allGuessedCount+".";
            }
        }

        function onHandleClick() {
            console.log("game record id is " + recordToGuess.id)
            console.log("you choose record with id " + this.id)
            var count = getAllGuessedCount(allRecordDecorators);

            if (recordToGuess.id == this.id) {//correct
                if (count == allRecordDecorators.length-1) {//you won!
                    @* @Model.GameOver(true) *@
                     //;
                    console.log("game over you won. count is " + count + " allRecordDecorators.length is " + allRecordDecorators.length-1)
                    endTheGame(true);
                    return;
                }
                $("#h1Failure").hide();
                $("#h1Success").show();
                $("#h1Success").fadeOut(3000, function () {
                    // Animation complete.
                });

                updateAllRecordsState(allRecordDecorators, parseInt(this.id), true);
            }
            else {//wrong
                if (constMaxWrongGuesses === _wrongGuesses) {//game over
                       @* @Model.GameOver(false) *@
                    console.log("game over you loose. count is " + count + " allRecordDecorators.length is " + allRecordDecorators.length-1)
                    endTheGame(false);
                    return;
                }
                _wrongGuesses++;
                $("#h1Failure").show();
                $("#h1Success").hide();
                $("#h1Failure").fadeOut(3000, function () {
                    // Animation complete.
                });
            }
            //console.log("allRecordDecorators are " + allRecordDecorators);


            console.log("getAllGuessedCount is " + count);
            var guessedIdexes = getAllGuessedIndexes(allRecordDecorators);
            console.log("excludeIdexes are " + guessedIdexes);

            var indexGuessRecordUnique = getRandomArr(null, 0, allRecordDecorators.length - 1, 1, guessedIdexes)[0];
            var indexsForGameRecords = getRandomArr(null, 0, allRecordDecorators.length - 1, 3, [ indexGuessRecordUnique ]);

            var indexForGameRecordInGameArray = getRandomArr(null, 0, 2, 1, [])[0];

            indexsForGameRecords[indexForGameRecordInGameArray] = indexGuessRecordUnique;

            var gameArr = buildGameArray(allRecordDecorators, indexsForGameRecords);


            console.log("gameArr is " + JSON.stringify(gameArr));

            console.log("indexGuessRecordUnique is " + indexGuessRecordUnique);
            recordToGuess = allRecordDecorators[indexGuessRecordUnique];
            buildScreen(gameArr);
        }

        function buildScreen(gameArr) {
            //clear the screen and define new records
            var myNode = document.getElementById("content");
            while (myNode.firstChild) {
                myNode.removeChild(myNode.firstChild);
            }
            //initializing - first time
            if (typeof gameArr === 'undefined' || gameArr === null) {
                $("#h1Failure").hide();
                $("#h1Success").hide();
                $("#h1Failure").blink({ delay: 200 });
                $("#h1Success").blink({ delay: 200 });
                $("#labelRecordToGuess").show();
                $("#h1GameOver").hide();

                allRecordDecorators = @Html.Raw(Json.Serialize(Model.AllRecordDecorators));
                console.log("allRecordDecorators are " + JSON.stringify(allRecordDecorators));

                gameRecordDecorators = @Html.Raw(Json.Serialize(Model.GameRecordDecorators));
                console.log("gameRecordDecorators are " + JSON.stringify(gameRecordDecorators));

                recordToGuess = @Html.Raw(Json.Serialize(Model.RecordToGuess));
                console.log("recordToGuess is " + JSON.stringify(recordToGuess));
            }
            else {
                gameRecordDecorators = gameArr;
            }

            var label=document.getElementById("labelRecordToGuess")
            label.innerHTML  = recordToGuess.word;
            for (var i = 0; i < gameRecordDecorators.length; i++) {

                var element = document.createElement("input");
                //Assign different attributes to the element.
                element.setAttribute("type", "button");
                element.setAttribute("class", "btn btn-info btn-block submit");
                element.setAttribute("value", gameRecordDecorators[i].translation);
                element.setAttribute("id", gameRecordDecorators[i].id.toString());
                element.setAttribute("test", gameRecordDecorators[i].id);
                var content = document.getElementById("content");
                //Append the element in page (in span).
                content.appendChild(element);
                content.appendChild(document.createElement("br"));
            }
            //describe in report problem with click
            $('.submit').click(onHandleClick);
        }
        $(window).on('load', buildScreen(null));


    });
</script>


<h1>The Game</h1>





<div class="div-table">
    <div class="div-table-row">
        <div class="div-table-col">
            <h1 id="labelRecordToGuess">Title</h1>
            <h1 id="h1GameOver"> <span id="gameOverSpan"></span> </h1>
        </div>
        <div class="div-table-col">
            <div class="div">
                <h1 id="h1Success"> <span id="success" class="label label-success">Correct!</span> </h1>
                <h1 id="h1Failure"> <span id="failure" class="label label-danger">Wrong!</span> </h1>
            </div>
            </div>
    </div>
    <div class="div-table-row">
        <div id="content">

        </div>
    </div>


</div>


<div>
    <a asp-page="./Index" asp-route-id="@Model.ListId">Back to Records</a> |
    <a asp-page="../Index">Back to List</a> |
    <a asp-page="./Game">Restart the game</a>
</div>


