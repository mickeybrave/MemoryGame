@page "/Lists/{id}/Records/Game"
@model MemoryGame.Pages.Lists.Records.GameModel

@{
    ViewData["Title"] = "The game for " + Model.Header;
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@if (@Model.IsGamePossible)
{
    <style>
        .div-table {
            display: table;
            width: 100%;
        }

        .div-table-row {
            display: table-row;
            clear: both;
        }

        .div-table-col {
            float: left;
            display: table-column;
            width: 50%;
        }

        .div {
            float: right;
        }
    </style>
    <script>




    $(document).ready(function () {

        //#region Fields
        var allRecordDecorators;
        var gameRecordDecorators;
        var recordToGuess;
        var _wrongGuesses = 0;
        const constMaxWrongGuesses = 3;
        const labelRecordToGuessId = "labelRecordToGuess";
        const h1GameOverId = "h1GameOver";
        const gameOverSpanId = "gameOverSpan";
        const h1ResultId = "h1Result";
        const recordSoreId = "recordSore";
        const guessedCounterSpanId = "guessedCounterSpan";
        const lifesSpanId = "lifesSpan";
        const delayBeforeRedirectionWhenGameOverMilSeconds = 5000;
        const fadeOutDelay = 3000;
        const blinkDelay = 200;

        const config = { isFromForeignLanguage: @Html.Raw(Json.Serialize(Model.Config.IsFromForeignLanguage)),
                            bestScore:  @Html.Raw(Json.Serialize(Model.Config.BestScore)),
                            id:        @Html.Raw(Json.Serialize(Model.Config.ID)),
                            userId:            @Html.Raw(Json.Serialize(Model.Config.UserId))
        };
        var gameListId;
        //#endregion

        function updateElementHtmlById(id, text) {
            var elem = document.getElementById(id);
            elem.innerHTML = text;
            return elem;
        }

          //#region UI
        function onHandleClick() {
            console.log("game record id is " + recordToGuess.id);
            console.log("you choose record with id " + this.id);

            var resultContentDiv = document.getElementById("resultContent");

            while (resultContentDiv.firstChild) {
                resultContentDiv.removeChild(resultContentDiv.firstChild);
            }

            var h1 = document.createElement("h1");
            var span = document.createElement("span");

            h1.id = h1ResultId;
            h1.appendChild(span);
            resultContentDiv.appendChild(h1);

            $("#" + h1ResultId).blink({ delay: blinkDelay });
            $("#" + h1ResultId).fadeOut(fadeOutDelay);

            let isGuessIsCorrect = false;

            if (recordToGuess.id == this.id) {
                isGuessIsCorrect = true;
                updateAllRecordsState(allRecordDecorators, parseInt(this.id), true);
            }

            for (var i = 0; i < gameRecordDecorators.length; i++) {
                var btn = document.getElementById(gameRecordDecorators[i].id);
                btn.disabled = true;
                console.log("button: translation" + gameRecordDecorators[i].translation + " ,with id=" + btn.id + " is disabled");
            }

            //right guess - make the right button green anyway
            var rightRecordButton = document.getElementById(recordToGuess.id);
            rightRecordButton.className = "btn btn-success btn-block submit";

            var count = getAllGuessedCount(allRecordDecorators);

            if (isGuessIsCorrect) {//correct
                updateAllRecordsState(allRecordDecorators, parseInt(this.id), true);

                updateElementHtmlById(guessedCounterSpanId, "Your score is " + count);

                if (count == allRecordDecorators.length) {//you won!
                    console.log("game over you won. count is " + count + " allRecordDecorators.length is " + allRecordDecorators.length )
                    endTheGame(true);
                    return;
                }
                span.className = "label label-success";
                span.innerHTML = "Correct!";
            }
            else {//wrong
                var wrongButton = document.getElementById(this.id);
                wrongButton.className = "btn btn-danger btn-block submit";

                if (constMaxWrongGuesses === _wrongGuesses) {//game over
                    console.log("game over you loose. count is " + count + " allRecordDecorators.length is " + allRecordDecorators.length)
                    endTheGame(false);
                    return;
                }
                _wrongGuesses++;
                var lifesSpan = updateElementHtmlById(lifesSpanId, constMaxWrongGuesses - _wrongGuesses);

                if (constMaxWrongGuesses === _wrongGuesses + 1) {//last life
                    lifesSpan.style.fontWeight = "bold";
                    lifesSpan.style.color = "red";
                }

                span.className = "label label-danger";
                span.innerHTML = "Wrong!";
            }

            console.log("getAllGuessedCount is " + count);
            const gameParameters = buildGameParameters(allRecordDecorators);
            recordToGuess = gameParameters.recordToGuess;
            //build screen with the same delay as correct/wrong label disappears to show that to the user
            window.setTimeout(function () {
                buildScreen(gameParameters.gameArr);
            }, fadeOutDelay);

        }

        function buildScreen(gameArr) {
            //clear the screen and define new records
            var contentDiv = document.getElementById("content");
            while (contentDiv.firstChild) {
                contentDiv.removeChild(contentDiv.firstChild);
            }
            //initializing - first time
            if (typeof gameArr === 'undefined' || gameArr === null) {

                $("#" + labelRecordToGuessId).show();
                $("#" + h1GameOverId).hide();

                var recordSoreH1 = document.getElementById(recordSoreId);
                recordSoreH1.innerHTML = "Your record is " + config.bestScore;

                allRecordDecorators = @Html.Raw(Json.Serialize(Model.AllRecordDecorators));
                gameListId=@Html.Raw(Json.Serialize(Model.ListId));
                console.log("allRecordDecorators are " + JSON.stringify(allRecordDecorators));
                const gameParameters = buildGameParameters(allRecordDecorators);
                recordToGuess = gameParameters.recordToGuess;
                gameRecordDecorators = gameParameters.gameArr;
                console.log("gameRecordDecorators are " + JSON.stringify(gameRecordDecorators));
                console.log("recordToGuess is " + JSON.stringify(recordToGuess));

                updateElementHtmlById(guessedCounterSpanId, "Your score is 0");
                updateElementHtmlById(lifesSpanId, constMaxWrongGuesses);
            }
            else {
                gameRecordDecorators = gameArr;
            }

            var label = document.getElementById(labelRecordToGuessId)

            const recordToGuessLabelContent = config.isFromForeignLanguage === true ?
                recordToGuess.word : recordToGuess.translation;

            label.innerHTML = recordToGuessLabelContent;


            for (var i = 0; i < gameRecordDecorators.length; i++) {

                var element = document.createElement("input");
                //Assign different attributes to the element.
                element.setAttribute("type", "button");
                element.setAttribute("class", "btn btn-info btn-block submit");
                const buttonContent = config.isFromForeignLanguage === true ?
                    gameRecordDecorators[i].translation : gameRecordDecorators[i].word;

                element.setAttribute("value", buttonContent);
                element.setAttribute("id", gameRecordDecorators[i].id.toString());
                var content = document.getElementById("content");
                //Append the element in page (in span).
                content.appendChild(element);
                content.appendChild(document.createElement("br"));
            }
            //describe in report problem with click
            $('.submit').click(onHandleClick);
        }

          //#endregion

        //#region BL

        function buildGameParameters(allRecords) {
            const guessedIdexes = getAllGuessedIndexes(allRecords);
            console.log("excludeIdexes are " + guessedIdexes);

            const indexGuessRecordUnique = getRandomArr(null, 0, allRecords.length - 1, 1, guessedIdexes)[0];
            const indexsForGameRecords = getRandomArr(null, 0, allRecords.length - 1, 3, [indexGuessRecordUnique]);

            const indexForGameRecordInGameArray = getRandomArr(null, 0, 2, 1, [])[0];

            indexsForGameRecords[indexForGameRecordInGameArray] = indexGuessRecordUnique;

            const gameArr = buildGameArray(allRecords, indexsForGameRecords);
            console.log("gameArr is " + JSON.stringify(gameArr));

            console.log("indexGuessRecordUnique is " + indexGuessRecordUnique);
            const recordToGuess = allRecords[indexGuessRecordUnique];

            return { gameArr, recordToGuess };

        }
        function getAllGuessedIndexes(arr) {
            var indexes = [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i].isGuessed === true) {
                    indexes.push(i);
                }
            }
            return indexes;
        }

        function getAllGuessedCount(arr) {
            var count = 0;
            for (var i = 0; i < arr.length; i++) {
                if (arr[i].isGuessed === true) {
                    count++;
                }
            }
            return count;
        }

        function buildGameArray(arr, indexesArr) {
            var gameArr = [];
            for (var i = 0; i < indexesArr.length; i++) {
                for (var j = 0; j < arr.length; j++) {
                    if (j === indexesArr[i]) {
                        console.log("added to game array: " + arr[j])
                        gameArr.push(arr[j]);
                    }
                }
            }
            return gameArr;
        }


        function updateAllRecordsState(arr, id, state) {
            for (var i = 0; i < arr.length; i++) {
                if (id === arr[i].id) {
                    arr[i].isGuessed = state;
                }
            }
        }
        //excludeArr - array for elements excluded from generation and gathering
        function getRandomArr(arr, min, max, count, excludeArr) {
            if (typeof arr === 'undefined' || arr === null) {
                arr = [];
                console.log('arr: ' + arr);
            }
            var randNum = Math.floor(Math.random() * (max - min + 1)) + min;

            if (!arr.includes(randNum) && !excludeArr.includes(randNum))
                arr.push(randNum);
            //continue recursion call untill will be enough elements
            if (arr.length < count)
                return getRandomArr(arr, min, max, count, excludeArr);
            else
                return arr;
        }
        //call to the default POST method of the pages
        function post(config, listId) {
            document
                .forms[0].action = "Game?configId=" + config.id + "&recordScore=" +
            config.bestScore + "&userId=" + config.userId + "&listId=" + listId;
            document.forms[0].submit();
        }
        function endTheGame(isWon) {
            var contentDiv = document.getElementById("content");
            while (contentDiv.firstChild) {
                contentDiv.removeChild(contentDiv.firstChild);
            }
            $("#" + h1GameOverId).show();
            var span = document.getElementById(gameOverSpanId);
            var allGuessedCount = getAllGuessedCount(allRecordDecorators);
            if (isWon) {

                span.className = "label label-success";
                span.innerHTML = "You won! Your score is " + allGuessedCount;
                config.bestScore = allGuessedCount;

                window.setTimeout(function () {
                    post(config, gameListId);
                }, delayBeforeRedirectionWhenGameOverMilSeconds);
            }
            else {
                span.className = "label label-danger";
                span.innerHTML = "Game Over. Your score is " + allGuessedCount + ".";
            }
        }
        //#endregion
        $(window).on('load', buildScreen(null));

    });
    </script>


    <h1 id="recordSore"></h1>

    <div class="div-table">
        <div class="div-table-row">
            <div class="div-table-col">
                <h2> <span id="guessedCounterSpan"></span> </h2>
            </div>
            <div class="div-table-col">
                <div class="div">
                    <h2><span>Lifes: </span> <span id="lifesSpan"></span> </h2>
                </div>
            </div>

        </div>

        <div class="div-table-row">
            <div class="div-table-col">
                <h1 id="labelRecordToGuess">Title</h1>
                <h1 id="h1GameOver"><span id="gameOverSpan"></span> </h1>
            </div>
            <div class="div-table-col">
                <div class="div" id="resultContent">

                </div>
            </div>
        </div>
        <div class="div-table-row">
            <div id="content">

            </div>
        </div>
    </div>

    <form method="get"></form>
}
else
{
    <h2>
        <span class="label label-danger"> There are not enough records to play the game.</span> <br/>
        <span class="label label-danger"> Your list must contain at least @Model.MinRecordsForGame records.</span>
    </h2>
}


<div>
    <a asp-page="./Index" asp-route-id="@Model.ListId">Back to Records</a> |
    <a asp-page="../Index">Back to List</a> |
    <a asp-page="./Game">Restart the game</a>
</div>


